// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v3.19.4
// source: helloworld/v1/greeter.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGreeterCreateRoute = "/helloworld.v1.Greeter/CreateRoute"
const OperationGreeterDeleteRoute = "/helloworld.v1.Greeter/DeleteRoute"
const OperationGreeterGetRoute = "/helloworld.v1.Greeter/GetRoute"

type GreeterHTTPServer interface {
	CreateRoute(context.Context, *CreateRouteRequest) (*CreateRouteReply, error)
	DeleteRoute(context.Context, *DeleteRouteRequest) (*Empty, error)
	GetRoute(context.Context, *GetRouteRequest) (*RouteReply, error)
}

func RegisterGreeterHTTPServer(s *http.Server, srv GreeterHTTPServer) {
	r := s.Route("/")
	r.POST("/route/register", _Greeter_CreateRoute0_HTTP_Handler(srv))
	r.GET("/route/{route_id}", _Greeter_GetRoute0_HTTP_Handler(srv))
	r.DELETE("/route/{route_id}", _Greeter_DeleteRoute0_HTTP_Handler(srv))
}

func _Greeter_CreateRoute0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateRouteRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterCreateRoute)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateRoute(ctx, req.(*CreateRouteRequest))
		})
		out, err := h(ctx, &in)
		reply := out.(*CreateRouteReply)
		if err != nil {
			if reply.AlreadyExists {
				return ctx.Result(208, reply)
			}
			return err
		}
		return ctx.Result(200, reply)
	}
}

func _Greeter_GetRoute0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRouteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterGetRoute)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetRoute(ctx, req.(*GetRouteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RouteReply)
		return ctx.Result(200, reply)
	}
}

func _Greeter_DeleteRoute0_HTTP_Handler(srv GreeterHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteRouteRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGreeterDeleteRoute)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteRoute(ctx, req.(*DeleteRouteRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Empty)
		return ctx.Result(202, reply)
	}
}

type GreeterHTTPClient interface {
	CreateRoute(ctx context.Context, req *CreateRouteRequest, opts ...http.CallOption) (rsp *CreateRouteReply, err error)
	DeleteRoute(ctx context.Context, req *DeleteRouteRequest, opts ...http.CallOption) (rsp *Empty, err error)
	GetRoute(ctx context.Context, req *GetRouteRequest, opts ...http.CallOption) (rsp *RouteReply, err error)
}

type GreeterHTTPClientImpl struct {
	cc *http.Client
}

func NewGreeterHTTPClient(client *http.Client) GreeterHTTPClient {
	return &GreeterHTTPClientImpl{client}
}

func (c *GreeterHTTPClientImpl) CreateRoute(ctx context.Context, in *CreateRouteRequest, opts ...http.CallOption) (*CreateRouteReply, error) {
	var out CreateRouteReply
	pattern := "/route/register"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGreeterCreateRoute))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) DeleteRoute(ctx context.Context, in *DeleteRouteRequest, opts ...http.CallOption) (*Empty, error) {
	var out Empty
	pattern := "/route/{route_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterDeleteRoute))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GreeterHTTPClientImpl) GetRoute(ctx context.Context, in *GetRouteRequest, opts ...http.CallOption) (*RouteReply, error) {
	var out RouteReply
	pattern := "/route/{route_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationGreeterGetRoute))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
