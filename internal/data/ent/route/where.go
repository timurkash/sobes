// Code generated by ent, DO NOT EDIT.

package route

import (
	"helloworld/internal/data/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// RouteName applies equality check predicate on the "route_name" field. It's identical to RouteNameEQ.
func RouteName(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRouteName), v))
	})
}

// Load applies equality check predicate on the "load" field. It's identical to LoadEQ.
func Load(v float64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoad), v))
	})
}

// CargoType applies equality check predicate on the "cargo_type" field. It's identical to CargoTypeEQ.
func CargoType(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCargoType), v))
	})
}

// IsActual applies equality check predicate on the "is_actual" field. It's identical to IsActualEQ.
func IsActual(v bool) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActual), v))
	})
}

// RouteNameEQ applies the EQ predicate on the "route_name" field.
func RouteNameEQ(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRouteName), v))
	})
}

// RouteNameNEQ applies the NEQ predicate on the "route_name" field.
func RouteNameNEQ(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRouteName), v))
	})
}

// RouteNameIn applies the In predicate on the "route_name" field.
func RouteNameIn(vs ...string) predicate.Route {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRouteName), v...))
	})
}

// RouteNameNotIn applies the NotIn predicate on the "route_name" field.
func RouteNameNotIn(vs ...string) predicate.Route {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRouteName), v...))
	})
}

// RouteNameGT applies the GT predicate on the "route_name" field.
func RouteNameGT(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRouteName), v))
	})
}

// RouteNameGTE applies the GTE predicate on the "route_name" field.
func RouteNameGTE(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRouteName), v))
	})
}

// RouteNameLT applies the LT predicate on the "route_name" field.
func RouteNameLT(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRouteName), v))
	})
}

// RouteNameLTE applies the LTE predicate on the "route_name" field.
func RouteNameLTE(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRouteName), v))
	})
}

// RouteNameContains applies the Contains predicate on the "route_name" field.
func RouteNameContains(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRouteName), v))
	})
}

// RouteNameHasPrefix applies the HasPrefix predicate on the "route_name" field.
func RouteNameHasPrefix(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRouteName), v))
	})
}

// RouteNameHasSuffix applies the HasSuffix predicate on the "route_name" field.
func RouteNameHasSuffix(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRouteName), v))
	})
}

// RouteNameEqualFold applies the EqualFold predicate on the "route_name" field.
func RouteNameEqualFold(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRouteName), v))
	})
}

// RouteNameContainsFold applies the ContainsFold predicate on the "route_name" field.
func RouteNameContainsFold(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRouteName), v))
	})
}

// LoadEQ applies the EQ predicate on the "load" field.
func LoadEQ(v float64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLoad), v))
	})
}

// LoadNEQ applies the NEQ predicate on the "load" field.
func LoadNEQ(v float64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLoad), v))
	})
}

// LoadIn applies the In predicate on the "load" field.
func LoadIn(vs ...float64) predicate.Route {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldLoad), v...))
	})
}

// LoadNotIn applies the NotIn predicate on the "load" field.
func LoadNotIn(vs ...float64) predicate.Route {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldLoad), v...))
	})
}

// LoadGT applies the GT predicate on the "load" field.
func LoadGT(v float64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLoad), v))
	})
}

// LoadGTE applies the GTE predicate on the "load" field.
func LoadGTE(v float64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLoad), v))
	})
}

// LoadLT applies the LT predicate on the "load" field.
func LoadLT(v float64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLoad), v))
	})
}

// LoadLTE applies the LTE predicate on the "load" field.
func LoadLTE(v float64) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLoad), v))
	})
}

// CargoTypeEQ applies the EQ predicate on the "cargo_type" field.
func CargoTypeEQ(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCargoType), v))
	})
}

// CargoTypeNEQ applies the NEQ predicate on the "cargo_type" field.
func CargoTypeNEQ(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCargoType), v))
	})
}

// CargoTypeIn applies the In predicate on the "cargo_type" field.
func CargoTypeIn(vs ...string) predicate.Route {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCargoType), v...))
	})
}

// CargoTypeNotIn applies the NotIn predicate on the "cargo_type" field.
func CargoTypeNotIn(vs ...string) predicate.Route {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCargoType), v...))
	})
}

// CargoTypeGT applies the GT predicate on the "cargo_type" field.
func CargoTypeGT(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCargoType), v))
	})
}

// CargoTypeGTE applies the GTE predicate on the "cargo_type" field.
func CargoTypeGTE(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCargoType), v))
	})
}

// CargoTypeLT applies the LT predicate on the "cargo_type" field.
func CargoTypeLT(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCargoType), v))
	})
}

// CargoTypeLTE applies the LTE predicate on the "cargo_type" field.
func CargoTypeLTE(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCargoType), v))
	})
}

// CargoTypeContains applies the Contains predicate on the "cargo_type" field.
func CargoTypeContains(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCargoType), v))
	})
}

// CargoTypeHasPrefix applies the HasPrefix predicate on the "cargo_type" field.
func CargoTypeHasPrefix(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCargoType), v))
	})
}

// CargoTypeHasSuffix applies the HasSuffix predicate on the "cargo_type" field.
func CargoTypeHasSuffix(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCargoType), v))
	})
}

// CargoTypeEqualFold applies the EqualFold predicate on the "cargo_type" field.
func CargoTypeEqualFold(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCargoType), v))
	})
}

// CargoTypeContainsFold applies the ContainsFold predicate on the "cargo_type" field.
func CargoTypeContainsFold(v string) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCargoType), v))
	})
}

// IsActualEQ applies the EQ predicate on the "is_actual" field.
func IsActualEQ(v bool) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActual), v))
	})
}

// IsActualNEQ applies the NEQ predicate on the "is_actual" field.
func IsActualNEQ(v bool) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsActual), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Route) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Route) predicate.Route {
	return predicate.Route(func(s *sql.Selector) {
		p(s.Not())
	})
}
