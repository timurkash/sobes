// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"helloworld/internal/data/ent/route"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// Route is the model entity for the Route schema.
type Route struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// RouteName holds the value of the "route_name" field.
	RouteName string `json:"route_name,omitempty"`
	// Load holds the value of the "load" field.
	Load float64 `json:"load,omitempty"`
	// CargoType holds the value of the "cargo_type" field.
	CargoType string `json:"cargo_type,omitempty"`
	// IsActual holds the value of the "is_actual" field.
	IsActual bool `json:"is_actual,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Route) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case route.FieldIsActual:
			values[i] = new(sql.NullBool)
		case route.FieldLoad:
			values[i] = new(sql.NullFloat64)
		case route.FieldID:
			values[i] = new(sql.NullInt64)
		case route.FieldRouteName, route.FieldCargoType:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Route", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Route fields.
func (r *Route) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case route.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = uint64(value.Int64)
		case route.FieldRouteName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field route_name", values[i])
			} else if value.Valid {
				r.RouteName = value.String
			}
		case route.FieldLoad:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field load", values[i])
			} else if value.Valid {
				r.Load = value.Float64
			}
		case route.FieldCargoType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cargo_type", values[i])
			} else if value.Valid {
				r.CargoType = value.String
			}
		case route.FieldIsActual:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_actual", values[i])
			} else if value.Valid {
				r.IsActual = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Route.
// Note that you need to call Route.Unwrap() before calling this method if this Route
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Route) Update() *RouteUpdateOne {
	return (&RouteClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Route entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Route) Unwrap() *Route {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Route is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Route) String() string {
	var builder strings.Builder
	builder.WriteString("Route(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("route_name=")
	builder.WriteString(r.RouteName)
	builder.WriteString(", ")
	builder.WriteString("load=")
	builder.WriteString(fmt.Sprintf("%v", r.Load))
	builder.WriteString(", ")
	builder.WriteString("cargo_type=")
	builder.WriteString(r.CargoType)
	builder.WriteString(", ")
	builder.WriteString("is_actual=")
	builder.WriteString(fmt.Sprintf("%v", r.IsActual))
	builder.WriteByte(')')
	return builder.String()
}

// Routes is a parsable slice of Route.
type Routes []*Route

func (r Routes) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
