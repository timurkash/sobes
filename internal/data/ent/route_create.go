// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"helloworld/internal/data/ent/route"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RouteCreate is the builder for creating a Route entity.
type RouteCreate struct {
	config
	mutation *RouteMutation
	hooks    []Hook
}

// SetRouteName sets the "route_name" field.
func (rc *RouteCreate) SetRouteName(s string) *RouteCreate {
	rc.mutation.SetRouteName(s)
	return rc
}

// SetLoad sets the "load" field.
func (rc *RouteCreate) SetLoad(f float64) *RouteCreate {
	rc.mutation.SetLoad(f)
	return rc
}

// SetCargoType sets the "cargo_type" field.
func (rc *RouteCreate) SetCargoType(s string) *RouteCreate {
	rc.mutation.SetCargoType(s)
	return rc
}

// SetIsActual sets the "is_actual" field.
func (rc *RouteCreate) SetIsActual(b bool) *RouteCreate {
	rc.mutation.SetIsActual(b)
	return rc
}

// SetNillableIsActual sets the "is_actual" field if the given value is not nil.
func (rc *RouteCreate) SetNillableIsActual(b *bool) *RouteCreate {
	if b != nil {
		rc.SetIsActual(*b)
	}
	return rc
}

// SetID sets the "id" field.
func (rc *RouteCreate) SetID(u uint64) *RouteCreate {
	rc.mutation.SetID(u)
	return rc
}

// Mutation returns the RouteMutation object of the builder.
func (rc *RouteCreate) Mutation() *RouteMutation {
	return rc.mutation
}

// Save creates the Route in the database.
func (rc *RouteCreate) Save(ctx context.Context) (*Route, error) {
	var (
		err  error
		node *Route
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RouteMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			if node, err = rc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			if rc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = rc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, rc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Route)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from RouteMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RouteCreate) SaveX(ctx context.Context) *Route {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RouteCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RouteCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RouteCreate) defaults() {
	if _, ok := rc.mutation.IsActual(); !ok {
		v := route.DefaultIsActual
		rc.mutation.SetIsActual(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RouteCreate) check() error {
	if _, ok := rc.mutation.RouteName(); !ok {
		return &ValidationError{Name: "route_name", err: errors.New(`ent: missing required field "Route.route_name"`)}
	}
	if _, ok := rc.mutation.Load(); !ok {
		return &ValidationError{Name: "load", err: errors.New(`ent: missing required field "Route.load"`)}
	}
	if _, ok := rc.mutation.CargoType(); !ok {
		return &ValidationError{Name: "cargo_type", err: errors.New(`ent: missing required field "Route.cargo_type"`)}
	}
	if _, ok := rc.mutation.IsActual(); !ok {
		return &ValidationError{Name: "is_actual", err: errors.New(`ent: missing required field "Route.is_actual"`)}
	}
	return nil
}

func (rc *RouteCreate) sqlSave(ctx context.Context) (*Route, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (rc *RouteCreate) createSpec() (*Route, *sqlgraph.CreateSpec) {
	var (
		_node = &Route{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: route.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: route.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.RouteName(); ok {
		_spec.SetField(route.FieldRouteName, field.TypeString, value)
		_node.RouteName = value
	}
	if value, ok := rc.mutation.Load(); ok {
		_spec.SetField(route.FieldLoad, field.TypeFloat64, value)
		_node.Load = value
	}
	if value, ok := rc.mutation.CargoType(); ok {
		_spec.SetField(route.FieldCargoType, field.TypeString, value)
		_node.CargoType = value
	}
	if value, ok := rc.mutation.IsActual(); ok {
		_spec.SetField(route.FieldIsActual, field.TypeBool, value)
		_node.IsActual = value
	}
	return _node, _spec
}

// RouteCreateBulk is the builder for creating many Route entities in bulk.
type RouteCreateBulk struct {
	config
	builders []*RouteCreate
}

// Save creates the Route entities in the database.
func (rcb *RouteCreateBulk) Save(ctx context.Context) ([]*Route, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Route, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RouteMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RouteCreateBulk) SaveX(ctx context.Context) []*Route {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RouteCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RouteCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}
